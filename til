#!/usr/bin/env bash

# TODO: Options for push, skip push
# TODO: Options to specify template or use default
# TODO: Options for default directory

# Set default values for environment variables if not set
TIL_FOLDER="${TIL_FOLDER:-$HOME/til}"

function main() {

  if [ ! -d "$TIL_FOLDER" ]; then
    mkdir -p "$TIL_FOLDER"
  fi

  if [ $# -eq 0 ]; then
    die "Error: Please provide a title for your TIL entry."
  fi

  local title="$*"
  filepath=$(create_markdown_file "$title")
  # git_commit_and_push "$filepath"

  return 0
}

# Function to print error message and exit
die() {
  local message=$1
  local code=${2:-1}
  echo "Error: $message" >&2
  exit "$code"
}

warn() {
  local message=$1
  echo "Warning: $message" >&2
}

# Convert a string to kebab-case (lowercase with hyphens)
to_kebab_case() {
  echo "$1" | tr '[:upper:]' '[:lower:]' | tr ' ' '-'
}

# We want unquoted arrays here, otherwise stuff don't work. Disable shellcheck
# shellcheck disable=SC2048,SC2086
to_title_case() {
  set ${*,,}
  set ${*^}
  echo -n "$1 "
  shift 1
  for f in ${*}; do
    case $f in A | The | Is | Of | And | Or | But | About | To | In | By)
      echo -n "${f,,} "
      ;;
    *) echo -n "$f " ;;
    esac
  done
  echo
}

# Check if directory is in a git repository and commit/push changes
git_commit_and_push() {
  local filepath="$1"
  local filename
  filename=$(basename "$filepath")

  pushd "$TIL_FOLDER" >/dev/null || return
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    git add "$filepath" >/dev/null 2>&1
    git commit -m "Add $filename" >/dev/null 2>&1
    git push >/dev/null 2>&1
  fi

  # Return to original directory
  popd >/dev/null || return
}

generate_filepath() {
  local title="$1"
  local kebab_title
  local date

  kebab_title=$(to_kebab_case "$title")
  date=$(date +%Y-%m-%d)
  local filename="${date}-${kebab_title}.md"
  local filepath="${TIL_FOLDER}/${filename}"

  echo "$filepath"
}

open_in_editor() {
  local filepath="$1"

  if [ -t 0 ] && [ -n "$EDITOR" ]; then
    command -v "$EDITOR" >/dev/null 2>&1 || die "Error: Command '$EDITOR' not found. Please set a valid \$EDITOR." 2
    # Redirect TTY to open NVIM inline
    $EDITOR "$filepath" <$(tty) >$(tty)
  fi
}

# Create a markdown file with the proper format
create_markdown_file() {
  local title="$1"
  local filepath
  filepath=$(generate_filepath "$title")

  local TITLE DATE TAGS CONTENT
  TITLE=$(to_title_case "$title")
  DATE=$(date +%Y-%m-%d)
  TAGS=
  CONTENT=
  if [ ! -t 0 ]; then
    CONTENT=$(cat)
  fi

  cat >"$filepath" <<EOF
---
title: $TITLE
date: $DATE
tags: $TAGS
---

# $CONTENT
EOF

  open_in_editor "$filepath"

  echo "$filepath"
}

main "$@"
