#!/usr/bin/env bash

set -euo pipefail

TIL_FOLDER="${TIL_FOLDER:-$HOME/til}"

DEFAULT_TEMPLATE="---
title: {TITLE}
date: {DATE}
tags: {TAGS}
---

# {TITLE}

{CONTENT}
"
TIL_TEMPLATE="${TIL_TEMPLATE:-$DEFAULT_TEMPLATE}"
TIL_SKIP_PUSH="${TIL_SKIP_PUSH:-false}"

function main() {
  local skip_push="$TIL_SKIP_PUSH"
  local template_file=""
  local custom_directory=""

  # Parse command-line arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      usage
      ;;
    -d | --directory)
      if [[ -z "$2" || "$2" == -* ]]; then
        die "Error: Option $1 requires an argument."
      fi
      custom_directory="$2"
      shift 2
      ;;
    -t | --template)
      if [[ -z "$2" || "$2" == -* ]]; then
        die "Error: Option $1 requires an argument."
      fi
      template_file="$2"
      shift 2
      ;;
    --skip-push)
      skip_push=true
      shift
      ;;
    -*)
      die "Unknown option: $1"
      ;;
    *)
      # Break out of the loop when we hit the title
      break
      ;;
    esac
  done

  if [[ -n "$custom_directory" ]]; then
    TIL_FOLDER="$custom_directory"
  fi

  if [[ -n "$template_file" ]]; then
    if [[ -f "$template_file" ]]; then
      TIL_TEMPLATE=$(cat "$template_file")
    else
      die "Template file not found: $template_file"
    fi
  fi

  if [[ ! -d "$TIL_FOLDER" ]]; then
    mkdir -p "$TIL_FOLDER"
  fi

  # Check if a title was provided
  if [[ $# -eq 0 ]]; then
    die "Error: Please provide a title for your TIL entry."
  fi

  # Combine remaining arguments into the title
  local title="$*"
  local filepath
  filepath=$(create_markdown_file "$title")

  # Commit and push if not skipped
  if [[ "$skip_push" != "true" ]]; then
    git_commit_and_push "$filepath"
  fi

  return 0
}

# Show usage information
usage() {
  cat <<EOF
Usage: til [OPTIONS] TITLE

Create a Today I Learned (TIL) markdown entry with the given title.

Options:
  -h, --help                   Show this help message and exit
  -d, --directory DIR          Specify the TIL directory (default: \$TIL_FOLDER or ~/til)
  -t, --content-template FILE  Use a custom template file (overrides \$TIL_TEMPLATE)
  --skip-push                  Skip git commit and push (default: false)

Environment Variables:
  TIL_FOLDER                Directory to store TIL entries (default: ~/til)
  TIL_TEMPLATE              Template string for TIL entries
  TIL_SKIP_PUSH             Set to true to skip git commit and push (default: false)

Examples:
  til "Bash Parameter Expansion"
  til Use bash parameter expansion
  til -d ~/documents/til "Vim Visual Mode"
  til -t ~/templates/custom.md "Docker Compose Networks"

EOF
  exit 0
}

# Function to print error message and exit
die() {
  local message=$1
  local code=${2:-1}
  echo "Error: $message" >&2
  exit "$code"
}

warn() {
  local message=$1
  echo "Warning: $message" >&2
}

# Convert a string to kebab-case (lowercase with hyphens)
to_kebab_case() {
  echo "$1" | tr '[:upper:]' '[:lower:]' | tr ' ' '-'
}

# We want unquoted arrays here, otherwise stuff don't work. Disable shellcheck
# shellcheck disable=SC2048,SC2086
to_title_case() {
  set ${*,,}
  set ${*^}
  echo -n "$1 "
  shift 1
  for f in ${*}; do
    case $f in A | The | Is | Of | And | Or | But | About | To | In | By)
      echo -n "${f,,} "
      ;;
    *) echo -n "$f " ;;
    esac
  done
  echo
}

# Check if directory is in a git repository and commit/push changes
git_commit_and_push() {
  local filepath="$1"
  local filename
  filename=$(basename "$filepath")

  pushd "$TIL_FOLDER" >/dev/null || return
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    git add "$filepath" >/dev/null 2>&1
    git commit -m "Add $filename" >/dev/null 2>&1
    git push >/dev/null 2>&1
  fi

  # Return to original directory
  popd >/dev/null || return
}

generate_filepath() {
  local title="$1"
  local kebab_title
  local date

  kebab_title=$(to_kebab_case "$title")
  date=$(date +%Y-%m-%d)
  local filename="${date}-${kebab_title}.md"
  local filepath="${TIL_FOLDER}/${filename}"

  echo "$filepath"
}

open_in_editor() {
  local filepath="$1"

  if [ -t 0 ] && [ -n "$EDITOR" ]; then
    command -v "$EDITOR" >/dev/null 2>&1 || die "Error: Command '$EDITOR' not found. Please set a valid \$EDITOR." 2
    # Redirect TTY to open NVIM inline
    $EDITOR "$filepath" <$(tty) >$(tty)
  fi
}

# Create a markdown file with the proper format
create_markdown_file() {
  local title="$1"
  local filepath
  filepath=$(generate_filepath "$title")

  local TITLE DATE TAGS CONTENT
  TITLE=$(to_title_case "$title")
  DATE=$(date +%Y-%m-%d)
  TAGS=
  CONTENT=
  if [ ! -t 0 ]; then
    CONTENT=$(cat)
  fi

  local content
  content=$(echo "$TIL_TEMPLATE" |
    sed "s/{TITLE}/$TITLE/g" |
    sed "s/{DATE}/$DATE/g" |
    sed "s/{TAGS}/$TAGS/g" |
    sed "s/{CONTENT}/$CONTENT/g")
  echo "$content" >"$filepath"

  open_in_editor "$filepath"

  echo "$filepath"
}

main "$@"
